{"version":3,"sources":["../src/Subscribe.jsx"],"names":["LoginStatus","componentWillUnmount","api","state","event","props","unsubscribe","handleChange","render","children","handleReady","Component","defaultProps","onChange","undefined","setState","subscribe"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;;;IAYqBA,W;;;;;;;;;;;;;;;wBAOnBC,oB,mCAAuB;AAAA,QACJC,GADI,GACwB,IADxB,CACbC,KADa,CACJD,GADI;AAAA,QACYE,KADZ,GACwB,IADxB,CACGC,KADH,CACYD,KADZ;;AAErB,QAAIF,GAAJ,EAAS;AACPA,UAAII,WAAJ,CAAgBF,KAAhB,EAAuB,KAAKG,YAA5B;AACD;AACF,G;;wBAoBDC,M,qBAAS;AAAA,QACCC,QADD,GACc,KAAKJ,KADnB,CACCI,QADD;;;AAGP,WACE;AAAC,0BAAD;AAAA,QAAY,SAAS,KAAKC,WAA1B;AACGD;AADH,KADF;AAKD,G;;;EAxCsCE,gB,UAChCC,Y,GAAe;AACpBC,YAAUC;AADU,C;;;OAItBX,K,GAAe,E;;OASfO,W;wFAAc,iBAAOR,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACJE,mBADI,GACM,OAAKC,KADX,CACJD,KADI;;;AAGZ,qBAAKW,QAAL,CAAc;AACZb;AADY,eAAd;;AAHY;AAAA,qBAONA,IAAIc,SAAJ,CAAcZ,KAAd,EAAqB,OAAKG,YAA1B,CAPM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;OAUdA,Y,GAAe,YAAmB;AAAA,QACxBM,QADwB,GACX,OAAKR,KADM,CACxBQ,QADwB;;;AAGhC,QAAIA,QAAJ,EAAc;AACZA;AACD;AACF,G;;kBA9BkBb,W","file":"Subscribe.js","sourcesContent":["// @flow\r\nimport React, { Component, type Node } from 'react';\r\nimport Initialize from './Initialize';\r\n\r\ntype Props = {\r\n  children: Node,\r\n  onChange?: Function,\r\n  event: string,\r\n};\r\n\r\ntype State = {\r\n  api?: Object,\r\n};\r\n\r\nexport default class LoginStatus extends Component<Props, State> {\r\n  static defaultProps = {\r\n    onChange: undefined,\r\n  };\r\n\r\n  state: State = {};\r\n\r\n  componentWillUnmount() {\r\n    const { state: { api }, props: { event } } = this;\r\n    if (api) {\r\n      api.unsubscribe(event, this.handleChange);\r\n    }\r\n  }\r\n\r\n  handleReady = async (api: Object): Promise<void> => {\r\n    const { event } = this.props;\r\n\r\n    this.setState({\r\n      api,\r\n    });\r\n\r\n    await api.subscribe(event, this.handleChange);\r\n  }\r\n\r\n  handleChange = (...args): void => {\r\n    const { onChange } = this.props;\r\n\r\n    if (onChange) {\r\n      onChange(...args);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Initialize onReady={this.handleReady}>\r\n        {children}\r\n      </Initialize>\r\n    );\r\n  }\r\n}\r\n"]}